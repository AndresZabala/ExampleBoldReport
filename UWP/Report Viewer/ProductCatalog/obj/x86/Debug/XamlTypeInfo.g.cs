//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace ProductCatalog
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace ProductCatalog.ProductCatalog_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[46];
            _typeNameTable[0] = "BoldReports.UI.Xaml.ReportViewer";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "String";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "System.Net.ICredentials";
            _typeNameTable[5] = "BoldReports.UI.Xaml.ReportServerFormsCredential";
            _typeNameTable[6] = "Object";
            _typeNameTable[7] = "System.Collections.Generic.List`1<BoldReports.UI.Xaml.DataSourceCredentials>";
            _typeNameTable[8] = "BoldReports.UI.Xaml.DataSourceCredentials";
            _typeNameTable[9] = "BoldReports.UI.Xaml.ProcessingMode";
            _typeNameTable[10] = "System.Enum";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "BoldReports.UI.Xaml.ExportOptions";
            _typeNameTable[13] = "BoldReports.UI.Xaml.ReportDataSourceCollection";
            _typeNameTable[14] = "System.Collections.Generic.List`1<BoldReports.UI.Xaml.ReportDataSource>";
            _typeNameTable[15] = "BoldReports.UI.Xaml.ReportDataSource";
            _typeNameTable[16] = "System.Collections.IEnumerable";
            _typeNameTable[17] = "System.Collections.Generic.List`1<System.Reflection.Assembly>";
            _typeNameTable[18] = "System.Reflection.Assembly";
            _typeNameTable[19] = "System.Collections.Generic.IEnumerable`1<System.Reflection.CustomAttributeData>";
            _typeNameTable[20] = "System.Collections.Generic.IEnumerable`1<System.Reflection.TypeInfo>";
            _typeNameTable[21] = "System.Reflection.MethodInfo";
            _typeNameTable[22] = "System.Reflection.MethodBase";
            _typeNameTable[23] = "System.Reflection.MemberInfo";
            _typeNameTable[24] = "System.Collections.Generic.IEnumerable`1<System.Type>";
            _typeNameTable[25] = "Int64";
            _typeNameTable[26] = "System.Reflection.Module";
            _typeNameTable[27] = "System.Collections.Generic.IEnumerable`1<System.Reflection.Module>";
            _typeNameTable[28] = "System.Security.SecurityRuleSet";
            _typeNameTable[29] = "BoldReports.UI.Xaml.MeasureTextOptions";
            _typeNameTable[30] = "BoldReports.UI.Xaml.ExportMode";
            _typeNameTable[31] = "BoldReports.Writer.ExportSettings";
            _typeNameTable[32] = "BoldReports.Writer.WordOptions";
            _typeNameTable[33] = "BoldReports.Writer.ExcelOptions";
            _typeNameTable[34] = "BoldReports.Writer.PDFOptions";
            _typeNameTable[35] = "BoldReports.Writer.CsvOptions";
            _typeNameTable[36] = "BoldReports.Writer.HTMLOptions";
            _typeNameTable[37] = "BoldReports.Writer.PPTOptions";
            _typeNameTable[38] = "Int32";
            _typeNameTable[39] = "ProductCatalog.ReportViewerPage";
            _typeNameTable[40] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[42] = "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper";
            _typeNameTable[43] = "Windows.UI.Xaml.Data.Binding";
            _typeNameTable[44] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>";
            _typeNameTable[45] = "Windows.UI.Xaml.FrameworkElement";

            _typeTable = new global::System.Type[46];
            _typeTable[0] = typeof(global::BoldReports.UI.Xaml.ReportViewer);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::System.String);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::System.Net.ICredentials);
            _typeTable[5] = typeof(global::BoldReports.UI.Xaml.ReportServerFormsCredential);
            _typeTable[6] = typeof(global::System.Object);
            _typeTable[7] = typeof(global::System.Collections.Generic.List<global::BoldReports.UI.Xaml.DataSourceCredentials>);
            _typeTable[8] = typeof(global::BoldReports.UI.Xaml.DataSourceCredentials);
            _typeTable[9] = typeof(global::BoldReports.UI.Xaml.ProcessingMode);
            _typeTable[10] = typeof(global::System.Enum);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::BoldReports.UI.Xaml.ExportOptions);
            _typeTable[13] = typeof(global::BoldReports.UI.Xaml.ReportDataSourceCollection);
            _typeTable[14] = typeof(global::System.Collections.Generic.List<global::BoldReports.UI.Xaml.ReportDataSource>);
            _typeTable[15] = typeof(global::BoldReports.UI.Xaml.ReportDataSource);
            _typeTable[16] = typeof(global::System.Collections.IEnumerable);
            _typeTable[17] = typeof(global::System.Collections.Generic.List<global::System.Reflection.Assembly>);
            _typeTable[18] = typeof(global::System.Reflection.Assembly);
            _typeTable[19] = typeof(global::System.Collections.Generic.IEnumerable<global::System.Reflection.CustomAttributeData>);
            _typeTable[20] = typeof(global::System.Collections.Generic.IEnumerable<global::System.Reflection.TypeInfo>);
            _typeTable[21] = typeof(global::System.Reflection.MethodInfo);
            _typeTable[22] = typeof(global::System.Reflection.MethodBase);
            _typeTable[23] = typeof(global::System.Reflection.MemberInfo);
            _typeTable[24] = typeof(global::System.Collections.Generic.IEnumerable<global::System.Type>);
            _typeTable[25] = typeof(global::System.Int64);
            _typeTable[26] = typeof(global::System.Reflection.Module);
            _typeTable[27] = typeof(global::System.Collections.Generic.IEnumerable<global::System.Reflection.Module>);
            _typeTable[28] = typeof(global::System.Security.SecurityRuleSet);
            _typeTable[29] = typeof(global::BoldReports.UI.Xaml.MeasureTextOptions);
            _typeTable[30] = typeof(global::BoldReports.UI.Xaml.ExportMode);
            _typeTable[31] = typeof(global::BoldReports.Writer.ExportSettings);
            _typeTable[32] = typeof(global::BoldReports.Writer.WordOptions);
            _typeTable[33] = typeof(global::BoldReports.Writer.ExcelOptions);
            _typeTable[34] = typeof(global::BoldReports.Writer.PDFOptions);
            _typeTable[35] = typeof(global::BoldReports.Writer.CsvOptions);
            _typeTable[36] = typeof(global::BoldReports.Writer.HTMLOptions);
            _typeTable[37] = typeof(global::BoldReports.Writer.PPTOptions);
            _typeTable[38] = typeof(global::System.Int32);
            _typeTable[39] = typeof(global::ProductCatalog.ReportViewerPage);
            _typeTable[40] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[42] = typeof(global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.Data.Binding);
            _typeTable[44] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>);
            _typeTable[45] = typeof(global::Windows.UI.Xaml.FrameworkElement);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ReportViewer() { return new global::BoldReports.UI.Xaml.ReportViewer(); }
        private object Activate_7_List() { return new global::System.Collections.Generic.List<global::BoldReports.UI.Xaml.DataSourceCredentials>(); }
        private object Activate_8_DataSourceCredentials() { return new global::BoldReports.UI.Xaml.DataSourceCredentials(); }
        private object Activate_13_ReportDataSourceCollection() { return new global::BoldReports.UI.Xaml.ReportDataSourceCollection(); }
        private object Activate_14_List() { return new global::System.Collections.Generic.List<global::BoldReports.UI.Xaml.ReportDataSource>(); }
        private object Activate_15_ReportDataSource() { return new global::BoldReports.UI.Xaml.ReportDataSource(); }
        private object Activate_17_List() { return new global::System.Collections.Generic.List<global::System.Reflection.Assembly>(); }
        private object Activate_31_ExportSettings() { return new global::BoldReports.Writer.ExportSettings(); }
        private object Activate_32_WordOptions() { return new global::BoldReports.Writer.WordOptions(); }
        private object Activate_33_ExcelOptions() { return new global::BoldReports.Writer.ExcelOptions(); }
        private object Activate_34_PDFOptions() { return new global::BoldReports.Writer.PDFOptions(); }
        private object Activate_35_CsvOptions() { return new global::BoldReports.Writer.CsvOptions(); }
        private object Activate_36_HTMLOptions() { return new global::BoldReports.Writer.HTMLOptions(); }
        private object Activate_37_PPTOptions() { return new global::BoldReports.Writer.PPTOptions(); }
        private object Activate_39_ReportViewerPage() { return new global::ProductCatalog.ReportViewerPage(); }
        private object Activate_42_SetterValueBindingHelper() { return new global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper(); }
        private object Activate_44_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>(); }
        private void VectorAdd_7_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BoldReports.UI.Xaml.DataSourceCredentials>)instance;
            var newItem = (global::BoldReports.UI.Xaml.DataSourceCredentials)item;
            collection.Add(newItem);
        }
        private void VectorAdd_13_ReportDataSourceCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BoldReports.UI.Xaml.ReportDataSource>)instance;
            var newItem = (global::BoldReports.UI.Xaml.ReportDataSource)item;
            collection.Add(newItem);
        }
        private void VectorAdd_14_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::BoldReports.UI.Xaml.ReportDataSource>)instance;
            var newItem = (global::BoldReports.UI.Xaml.ReportDataSource)item;
            collection.Add(newItem);
        }
        private void VectorAdd_17_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Reflection.Assembly>)instance;
            var newItem = (global::System.Reflection.Assembly)item;
            collection.Add(newItem);
        }
        private void VectorAdd_44_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  BoldReports.UI.Xaml.ReportViewer
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_ReportViewer;
                userType.AddMemberName("ReportPath");
                userType.AddMemberName("IsPrintPreviewEnabled");
                userType.AddMemberName("EnableFontKerning");
                userType.AddMemberName("ReportServerUrl");
                userType.AddMemberName("ReportServerCredential");
                userType.AddMemberName("ReportServerFormsCredential");
                userType.AddMemberName("DataSourceCredentials");
                userType.AddMemberName("ProcessingMode");
                userType.AddMemberName("ExportOptions");
                userType.AddMemberName("ShowNavigationBar");
                userType.AddMemberName("ShowPageNavigation");
                userType.AddMemberName("ShowPageNotification");
                userType.AddMemberName("ShowParametersBlock");
                userType.AddMemberName("ShowDocumentMap");
                userType.AddMemberName("DataSources");
                userType.AddMemberName("Assemblies");
                userType.AddMemberName("EnableVirtualEvaluation");
                userType.AddMemberName("RoundLayoutMeasures");
                userType.AddMemberName("MeasureTextOption");
                userType.AddMemberName("ReportServiceURL");
                userType.AddMemberName("ExportMode");
                userType.AddMemberName("ShowExportStatus");
                userType.AddMemberName("LoadCredentialsInformationinServer");
                userType.AddMemberName("ExportSettings");
                userType.AddMemberName("WordOptions");
                userType.AddMemberName("ExcelOptions");
                userType.AddMemberName("PDFOptions");
                userType.AddMemberName("CsvOptions");
                userType.AddMemberName("HTMLOptions");
                userType.AddMemberName("PPTOptions");
                userType.AddMemberName("ServiceAuthorizationToken");
                userType.AddMemberName("CurrentPage");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  String
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  System.Net.ICredentials
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 5:   //  BoldReports.UI.Xaml.ReportServerFormsCredential
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  Object
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  System.Collections.Generic.List`1<BoldReports.UI.Xaml.DataSourceCredentials>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_7_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  BoldReports.UI.Xaml.DataSourceCredentials
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_DataSourceCredentials;
                userType.AddMemberName("IntegratedSecurity");
                userType.AddMemberName("Name");
                userType.AddMemberName("Password");
                userType.AddMemberName("UserId");
                userType.AddMemberName("ConnectionString");
                xamlType = userType;
                break;

            case 9:   //  BoldReports.UI.Xaml.ProcessingMode
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Remote", global::BoldReports.UI.Xaml.ProcessingMode.Remote);
                userType.AddEnumValue("Local", global::BoldReports.UI.Xaml.ProcessingMode.Local);
                xamlType = userType;
                break;

            case 10:   //  System.Enum
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  BoldReports.UI.Xaml.ExportOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Excel", global::BoldReports.UI.Xaml.ExportOptions.Excel);
                userType.AddEnumValue("Html", global::BoldReports.UI.Xaml.ExportOptions.Html);
                userType.AddEnumValue("Pdf", global::BoldReports.UI.Xaml.ExportOptions.Pdf);
                userType.AddEnumValue("Word", global::BoldReports.UI.Xaml.ExportOptions.Word);
                userType.AddEnumValue("CSV", global::BoldReports.UI.Xaml.ExportOptions.CSV);
                userType.AddEnumValue("XML", global::BoldReports.UI.Xaml.ExportOptions.XML);
                userType.AddEnumValue("All", global::BoldReports.UI.Xaml.ExportOptions.All);
                xamlType = userType;
                break;

            case 13:   //  BoldReports.UI.Xaml.ReportDataSourceCollection
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.List`1<BoldReports.UI.Xaml.ReportDataSource>"));
                userType.CollectionAdd = VectorAdd_13_ReportDataSourceCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  System.Collections.Generic.List`1<BoldReports.UI.Xaml.ReportDataSource>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_List;
                userType.CollectionAdd = VectorAdd_14_List;
                xamlType = userType;
                break;

            case 15:   //  BoldReports.UI.Xaml.ReportDataSource
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_ReportDataSource;
                userType.AddMemberName("Name");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 16:   //  System.Collections.IEnumerable
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  System.Collections.Generic.List`1<System.Reflection.Assembly>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_17_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  System.Reflection.Assembly
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("CodeBase");
                userType.AddMemberName("CustomAttributes");
                userType.AddMemberName("DefinedTypes");
                userType.AddMemberName("EntryPoint");
                userType.AddMemberName("EscapedCodeBase");
                userType.AddMemberName("ExportedTypes");
                userType.AddMemberName("FullName");
                userType.AddMemberName("GlobalAssemblyCache");
                userType.AddMemberName("HostContext");
                userType.AddMemberName("ImageRuntimeVersion");
                userType.AddMemberName("IsDynamic");
                userType.AddMemberName("IsFullyTrusted");
                userType.AddMemberName("Location");
                userType.AddMemberName("ManifestModule");
                userType.AddMemberName("Modules");
                userType.AddMemberName("ReflectionOnly");
                userType.AddMemberName("SecurityRuleSet");
                xamlType = userType;
                break;

            case 19:   //  System.Collections.Generic.IEnumerable`1<System.Reflection.CustomAttributeData>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.Generic.IEnumerable`1<System.Reflection.TypeInfo>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  System.Reflection.MethodInfo
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Reflection.MethodBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  System.Reflection.MethodBase
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Reflection.MemberInfo"));
                xamlType = userType;
                break;

            case 23:   //  System.Reflection.MemberInfo
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 24:   //  System.Collections.Generic.IEnumerable`1<System.Type>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  Int64
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  System.Reflection.Module
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.Collections.Generic.IEnumerable`1<System.Reflection.Module>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  System.Security.SecurityRuleSet
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::System.Security.SecurityRuleSet.None);
                userType.AddEnumValue("Level1", global::System.Security.SecurityRuleSet.Level1);
                userType.AddEnumValue("Level2", global::System.Security.SecurityRuleSet.Level2);
                xamlType = userType;
                break;

            case 29:   //  BoldReports.UI.Xaml.MeasureTextOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::BoldReports.UI.Xaml.MeasureTextOptions.Default);
                userType.AddEnumValue("PdfFont", global::BoldReports.UI.Xaml.MeasureTextOptions.PdfFont);
                xamlType = userType;
                break;

            case 30:   //  BoldReports.UI.Xaml.ExportMode
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Server", global::BoldReports.UI.Xaml.ExportMode.Server);
                userType.AddEnumValue("Local", global::BoldReports.UI.Xaml.ExportMode.Local);
                xamlType = userType;
                break;

            case 31:   //  BoldReports.Writer.ExportSettings
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  BoldReports.Writer.WordOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  BoldReports.Writer.ExcelOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  BoldReports.Writer.PDFOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  BoldReports.Writer.CsvOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  BoldReports.Writer.HTMLOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  BoldReports.Writer.PPTOptions
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  Int32
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 39:   //  ProductCatalog.ReportViewerPage
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_ReportViewerPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_42_SetterValueBindingHelper;
                userType.AddMemberName("Type");
                userType.AddMemberName("Property");
                userType.AddMemberName("Binding");
                userType.AddMemberName("Values");
                userType.AddMemberName("PropertyBinding");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 43:   //  Windows.UI.Xaml.Data.Binding
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>
                userType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_44_Collection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::BoldReports.UWP.BoldReports_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.CellGrid.Syncfusion_SfCellGrid_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfChart.UWP.Syncfusion_SfChart_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Gauges.Syncfusion_SfGauge_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Grid.Syncfusion_SfGridCommon_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Input.Syncfusion_SfInput_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Maps.Syncfusion_SfMaps_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Syncfusion_SfShared_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Navigation.Syncfusion_SfTreeNavigator_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ReportViewer_ReportPath(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ReportPath;
        }
        private void set_0_ReportViewer_ReportPath(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ReportPath = (global::System.String)Value;
        }
        private object get_1_ReportViewer_IsPrintPreviewEnabled(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.IsPrintPreviewEnabled;
        }
        private void set_1_ReportViewer_IsPrintPreviewEnabled(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.IsPrintPreviewEnabled = (global::System.Boolean)Value;
        }
        private object get_2_ReportViewer_EnableFontKerning(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.EnableFontKerning;
        }
        private void set_2_ReportViewer_EnableFontKerning(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.EnableFontKerning = (global::System.Boolean)Value;
        }
        private object get_3_ReportViewer_ReportServerUrl(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ReportServerUrl;
        }
        private void set_3_ReportViewer_ReportServerUrl(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ReportServerUrl = (global::System.String)Value;
        }
        private object get_4_ReportViewer_ReportServerCredential(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ReportServerCredential;
        }
        private void set_4_ReportViewer_ReportServerCredential(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ReportServerCredential = (global::System.Net.ICredentials)Value;
        }
        private object get_5_ReportViewer_ReportServerFormsCredential(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ReportServerFormsCredential;
        }
        private void set_5_ReportViewer_ReportServerFormsCredential(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ReportServerFormsCredential = (global::BoldReports.UI.Xaml.ReportServerFormsCredential)Value;
        }
        private object get_6_ReportViewer_DataSourceCredentials(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.DataSourceCredentials;
        }
        private void set_6_ReportViewer_DataSourceCredentials(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.DataSourceCredentials = (global::System.Collections.Generic.List<global::BoldReports.UI.Xaml.DataSourceCredentials>)Value;
        }
        private object get_7_DataSourceCredentials_IntegratedSecurity(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            return that.IntegratedSecurity;
        }
        private void set_7_DataSourceCredentials_IntegratedSecurity(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            that.IntegratedSecurity = (global::System.Boolean)Value;
        }
        private object get_8_DataSourceCredentials_Name(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            return that.Name;
        }
        private void set_8_DataSourceCredentials_Name(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_9_DataSourceCredentials_Password(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            return that.Password;
        }
        private void set_9_DataSourceCredentials_Password(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            that.Password = (global::System.String)Value;
        }
        private object get_10_DataSourceCredentials_UserId(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            return that.UserId;
        }
        private void set_10_DataSourceCredentials_UserId(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            that.UserId = (global::System.String)Value;
        }
        private object get_11_DataSourceCredentials_ConnectionString(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            return that.ConnectionString;
        }
        private void set_11_DataSourceCredentials_ConnectionString(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.DataSourceCredentials)instance;
            that.ConnectionString = (global::System.String)Value;
        }
        private object get_12_ReportViewer_ProcessingMode(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ProcessingMode;
        }
        private void set_12_ReportViewer_ProcessingMode(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ProcessingMode = (global::BoldReports.UI.Xaml.ProcessingMode)Value;
        }
        private object get_13_ReportViewer_ExportOptions(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ExportOptions;
        }
        private void set_13_ReportViewer_ExportOptions(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ExportOptions = (global::BoldReports.UI.Xaml.ExportOptions)Value;
        }
        private object get_14_ReportViewer_ShowNavigationBar(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ShowNavigationBar;
        }
        private void set_14_ReportViewer_ShowNavigationBar(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ShowNavigationBar = (global::System.Boolean)Value;
        }
        private object get_15_ReportViewer_ShowPageNavigation(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ShowPageNavigation;
        }
        private void set_15_ReportViewer_ShowPageNavigation(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ShowPageNavigation = (global::System.Boolean)Value;
        }
        private object get_16_ReportViewer_ShowPageNotification(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ShowPageNotification;
        }
        private void set_16_ReportViewer_ShowPageNotification(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ShowPageNotification = (global::System.Boolean)Value;
        }
        private object get_17_ReportViewer_ShowParametersBlock(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ShowParametersBlock;
        }
        private void set_17_ReportViewer_ShowParametersBlock(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ShowParametersBlock = (global::System.Boolean)Value;
        }
        private object get_18_ReportViewer_ShowDocumentMap(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ShowDocumentMap;
        }
        private void set_18_ReportViewer_ShowDocumentMap(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ShowDocumentMap = (global::System.Boolean)Value;
        }
        private object get_19_ReportViewer_DataSources(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.DataSources;
        }
        private object get_20_ReportDataSource_Name(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportDataSource)instance;
            return that.Name;
        }
        private void set_20_ReportDataSource_Name(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportDataSource)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_21_ReportDataSource_Value(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportDataSource)instance;
            return that.Value;
        }
        private void set_21_ReportDataSource_Value(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportDataSource)instance;
            that.Value = (global::System.Collections.IEnumerable)Value;
        }
        private object get_22_ReportViewer_Assemblies(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.Assemblies;
        }
        private object get_23_Assembly_CodeBase(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.CodeBase;
        }
        private object get_24_Assembly_CustomAttributes(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.CustomAttributes;
        }
        private object get_25_Assembly_DefinedTypes(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.DefinedTypes;
        }
        private object get_26_Assembly_EntryPoint(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.EntryPoint;
        }
        private object get_27_Assembly_EscapedCodeBase(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.EscapedCodeBase;
        }
        private object get_28_Assembly_ExportedTypes(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.ExportedTypes;
        }
        private object get_29_Assembly_FullName(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.FullName;
        }
        private object get_30_Assembly_GlobalAssemblyCache(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.GlobalAssemblyCache;
        }
        private object get_31_Assembly_HostContext(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.HostContext;
        }
        private object get_32_Assembly_ImageRuntimeVersion(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.ImageRuntimeVersion;
        }
        private object get_33_Assembly_IsDynamic(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.IsDynamic;
        }
        private object get_34_Assembly_IsFullyTrusted(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.IsFullyTrusted;
        }
        private object get_35_Assembly_Location(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.Location;
        }
        private object get_36_Assembly_ManifestModule(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.ManifestModule;
        }
        private object get_37_Assembly_Modules(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.Modules;
        }
        private object get_38_Assembly_ReflectionOnly(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.ReflectionOnly;
        }
        private object get_39_Assembly_SecurityRuleSet(object instance)
        {
            var that = (global::System.Reflection.Assembly)instance;
            return that.SecurityRuleSet;
        }
        private object get_40_ReportViewer_EnableVirtualEvaluation(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.EnableVirtualEvaluation;
        }
        private void set_40_ReportViewer_EnableVirtualEvaluation(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.EnableVirtualEvaluation = (global::System.Boolean)Value;
        }
        private object get_41_ReportViewer_RoundLayoutMeasures(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.RoundLayoutMeasures;
        }
        private void set_41_ReportViewer_RoundLayoutMeasures(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.RoundLayoutMeasures = (global::System.Boolean)Value;
        }
        private object get_42_ReportViewer_MeasureTextOption(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.MeasureTextOption;
        }
        private void set_42_ReportViewer_MeasureTextOption(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.MeasureTextOption = (global::BoldReports.UI.Xaml.MeasureTextOptions)Value;
        }
        private object get_43_ReportViewer_ReportServiceURL(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ReportServiceURL;
        }
        private void set_43_ReportViewer_ReportServiceURL(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ReportServiceURL = (global::System.String)Value;
        }
        private object get_44_ReportViewer_ExportMode(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ExportMode;
        }
        private void set_44_ReportViewer_ExportMode(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ExportMode = (global::BoldReports.UI.Xaml.ExportMode)Value;
        }
        private object get_45_ReportViewer_ShowExportStatus(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ShowExportStatus;
        }
        private void set_45_ReportViewer_ShowExportStatus(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ShowExportStatus = (global::System.Boolean)Value;
        }
        private object get_46_ReportViewer_LoadCredentialsInformationinServer(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.LoadCredentialsInformationinServer;
        }
        private void set_46_ReportViewer_LoadCredentialsInformationinServer(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.LoadCredentialsInformationinServer = (global::System.Boolean)Value;
        }
        private object get_47_ReportViewer_ExportSettings(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ExportSettings;
        }
        private void set_47_ReportViewer_ExportSettings(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ExportSettings = (global::BoldReports.Writer.ExportSettings)Value;
        }
        private object get_48_ReportViewer_WordOptions(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.WordOptions;
        }
        private void set_48_ReportViewer_WordOptions(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.WordOptions = (global::BoldReports.Writer.WordOptions)Value;
        }
        private object get_49_ReportViewer_ExcelOptions(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ExcelOptions;
        }
        private void set_49_ReportViewer_ExcelOptions(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ExcelOptions = (global::BoldReports.Writer.ExcelOptions)Value;
        }
        private object get_50_ReportViewer_PDFOptions(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.PDFOptions;
        }
        private void set_50_ReportViewer_PDFOptions(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.PDFOptions = (global::BoldReports.Writer.PDFOptions)Value;
        }
        private object get_51_ReportViewer_CsvOptions(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.CsvOptions;
        }
        private void set_51_ReportViewer_CsvOptions(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.CsvOptions = (global::BoldReports.Writer.CsvOptions)Value;
        }
        private object get_52_ReportViewer_HTMLOptions(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.HTMLOptions;
        }
        private void set_52_ReportViewer_HTMLOptions(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.HTMLOptions = (global::BoldReports.Writer.HTMLOptions)Value;
        }
        private object get_53_ReportViewer_PPTOptions(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.PPTOptions;
        }
        private void set_53_ReportViewer_PPTOptions(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.PPTOptions = (global::BoldReports.Writer.PPTOptions)Value;
        }
        private object get_54_ReportViewer_ServiceAuthorizationToken(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.ServiceAuthorizationToken;
        }
        private void set_54_ReportViewer_ServiceAuthorizationToken(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.ServiceAuthorizationToken = (global::System.String)Value;
        }
        private object get_55_ReportViewer_CurrentPage(object instance)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            return that.CurrentPage;
        }
        private void set_55_ReportViewer_CurrentPage(object instance, object Value)
        {
            var that = (global::BoldReports.UI.Xaml.ReportViewer)instance;
            that.CurrentPage = (global::System.Int32)Value;
        }
        private object get_56_SetterValueBindingHelper_Type(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Type;
        }
        private void set_56_SetterValueBindingHelper_Type(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            that.Type = (global::System.String)Value;
        }
        private object get_57_SetterValueBindingHelper_Property(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Property;
        }
        private void set_57_SetterValueBindingHelper_Property(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            that.Property = (global::System.String)Value;
        }
        private object get_58_SetterValueBindingHelper_Binding(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Binding;
        }
        private void set_58_SetterValueBindingHelper_Binding(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            that.Binding = (global::Windows.UI.Xaml.Data.Binding)Value;
        }
        private object get_59_SetterValueBindingHelper_Values(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Values;
        }
        private object get_60_SetterValueBindingHelper_PropertyBinding(object instance)
        {
            return global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.GetPropertyBinding((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_60_SetterValueBindingHelper_PropertyBinding(object instance, object Value)
        {
            global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.SetPropertyBinding((global::Windows.UI.Xaml.FrameworkElement)instance, (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)Value);
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember xamlMember = null;
            global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "BoldReports.UI.Xaml.ReportViewer.ReportPath":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ReportPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_ReportViewer_ReportPath;
                xamlMember.Setter = set_0_ReportViewer_ReportPath;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.IsPrintPreviewEnabled":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "IsPrintPreviewEnabled", "Boolean");
                xamlMember.Getter = get_1_ReportViewer_IsPrintPreviewEnabled;
                xamlMember.Setter = set_1_ReportViewer_IsPrintPreviewEnabled;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.EnableFontKerning":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "EnableFontKerning", "Boolean");
                xamlMember.Getter = get_2_ReportViewer_EnableFontKerning;
                xamlMember.Setter = set_2_ReportViewer_EnableFontKerning;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ReportServerUrl":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ReportServerUrl", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_ReportViewer_ReportServerUrl;
                xamlMember.Setter = set_3_ReportViewer_ReportServerUrl;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ReportServerCredential":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ReportServerCredential", "System.Net.ICredentials");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ReportViewer_ReportServerCredential;
                xamlMember.Setter = set_4_ReportViewer_ReportServerCredential;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ReportServerFormsCredential":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ReportServerFormsCredential", "BoldReports.UI.Xaml.ReportServerFormsCredential");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_ReportViewer_ReportServerFormsCredential;
                xamlMember.Setter = set_5_ReportViewer_ReportServerFormsCredential;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.DataSourceCredentials":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "DataSourceCredentials", "System.Collections.Generic.List`1<BoldReports.UI.Xaml.DataSourceCredentials>");
                xamlMember.Getter = get_6_ReportViewer_DataSourceCredentials;
                xamlMember.Setter = set_6_ReportViewer_DataSourceCredentials;
                break;
            case "BoldReports.UI.Xaml.DataSourceCredentials.IntegratedSecurity":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.DataSourceCredentials");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "IntegratedSecurity", "Boolean");
                xamlMember.Getter = get_7_DataSourceCredentials_IntegratedSecurity;
                xamlMember.Setter = set_7_DataSourceCredentials_IntegratedSecurity;
                break;
            case "BoldReports.UI.Xaml.DataSourceCredentials.Name":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.DataSourceCredentials");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_8_DataSourceCredentials_Name;
                xamlMember.Setter = set_8_DataSourceCredentials_Name;
                break;
            case "BoldReports.UI.Xaml.DataSourceCredentials.Password":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.DataSourceCredentials");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Password", "String");
                xamlMember.Getter = get_9_DataSourceCredentials_Password;
                xamlMember.Setter = set_9_DataSourceCredentials_Password;
                break;
            case "BoldReports.UI.Xaml.DataSourceCredentials.UserId":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.DataSourceCredentials");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "UserId", "String");
                xamlMember.Getter = get_10_DataSourceCredentials_UserId;
                xamlMember.Setter = set_10_DataSourceCredentials_UserId;
                break;
            case "BoldReports.UI.Xaml.DataSourceCredentials.ConnectionString":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.DataSourceCredentials");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ConnectionString", "String");
                xamlMember.Getter = get_11_DataSourceCredentials_ConnectionString;
                xamlMember.Setter = set_11_DataSourceCredentials_ConnectionString;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ProcessingMode":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ProcessingMode", "BoldReports.UI.Xaml.ProcessingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_ReportViewer_ProcessingMode;
                xamlMember.Setter = set_12_ReportViewer_ProcessingMode;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ExportOptions":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ExportOptions", "BoldReports.UI.Xaml.ExportOptions");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_ReportViewer_ExportOptions;
                xamlMember.Setter = set_13_ReportViewer_ExportOptions;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ShowNavigationBar":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ShowNavigationBar", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ReportViewer_ShowNavigationBar;
                xamlMember.Setter = set_14_ReportViewer_ShowNavigationBar;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ShowPageNavigation":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ShowPageNavigation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ReportViewer_ShowPageNavigation;
                xamlMember.Setter = set_15_ReportViewer_ShowPageNavigation;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ShowPageNotification":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ShowPageNotification", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ReportViewer_ShowPageNotification;
                xamlMember.Setter = set_16_ReportViewer_ShowPageNotification;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ShowParametersBlock":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ShowParametersBlock", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_ReportViewer_ShowParametersBlock;
                xamlMember.Setter = set_17_ReportViewer_ShowParametersBlock;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ShowDocumentMap":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ShowDocumentMap", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_ReportViewer_ShowDocumentMap;
                xamlMember.Setter = set_18_ReportViewer_ShowDocumentMap;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.DataSources":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "DataSources", "BoldReports.UI.Xaml.ReportDataSourceCollection");
                xamlMember.Getter = get_19_ReportViewer_DataSources;
                xamlMember.SetIsReadOnly();
                break;
            case "BoldReports.UI.Xaml.ReportDataSource.Name":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportDataSource");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_20_ReportDataSource_Name;
                xamlMember.Setter = set_20_ReportDataSource_Name;
                break;
            case "BoldReports.UI.Xaml.ReportDataSource.Value":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportDataSource");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Value", "System.Collections.IEnumerable");
                xamlMember.Getter = get_21_ReportDataSource_Value;
                xamlMember.Setter = set_21_ReportDataSource_Value;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.Assemblies":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Assemblies", "System.Collections.Generic.List`1<System.Reflection.Assembly>");
                xamlMember.Getter = get_22_ReportViewer_Assemblies;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.CodeBase":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "CodeBase", "String");
                xamlMember.Getter = get_23_Assembly_CodeBase;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.CustomAttributes":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "CustomAttributes", "System.Collections.Generic.IEnumerable`1<System.Reflection.CustomAttributeData>");
                xamlMember.Getter = get_24_Assembly_CustomAttributes;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.DefinedTypes":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "DefinedTypes", "System.Collections.Generic.IEnumerable`1<System.Reflection.TypeInfo>");
                xamlMember.Getter = get_25_Assembly_DefinedTypes;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.EntryPoint":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "EntryPoint", "System.Reflection.MethodInfo");
                xamlMember.Getter = get_26_Assembly_EntryPoint;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.EscapedCodeBase":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "EscapedCodeBase", "String");
                xamlMember.Getter = get_27_Assembly_EscapedCodeBase;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.ExportedTypes":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ExportedTypes", "System.Collections.Generic.IEnumerable`1<System.Type>");
                xamlMember.Getter = get_28_Assembly_ExportedTypes;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.FullName":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "FullName", "String");
                xamlMember.Getter = get_29_Assembly_FullName;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.GlobalAssemblyCache":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "GlobalAssemblyCache", "Boolean");
                xamlMember.Getter = get_30_Assembly_GlobalAssemblyCache;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.HostContext":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "HostContext", "Int64");
                xamlMember.Getter = get_31_Assembly_HostContext;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.ImageRuntimeVersion":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ImageRuntimeVersion", "String");
                xamlMember.Getter = get_32_Assembly_ImageRuntimeVersion;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.IsDynamic":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "IsDynamic", "Boolean");
                xamlMember.Getter = get_33_Assembly_IsDynamic;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.IsFullyTrusted":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "IsFullyTrusted", "Boolean");
                xamlMember.Getter = get_34_Assembly_IsFullyTrusted;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.Location":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Location", "String");
                xamlMember.Getter = get_35_Assembly_Location;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.ManifestModule":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ManifestModule", "System.Reflection.Module");
                xamlMember.Getter = get_36_Assembly_ManifestModule;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.Modules":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Modules", "System.Collections.Generic.IEnumerable`1<System.Reflection.Module>");
                xamlMember.Getter = get_37_Assembly_Modules;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.ReflectionOnly":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ReflectionOnly", "Boolean");
                xamlMember.Getter = get_38_Assembly_ReflectionOnly;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Reflection.Assembly.SecurityRuleSet":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Reflection.Assembly");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "SecurityRuleSet", "System.Security.SecurityRuleSet");
                xamlMember.Getter = get_39_Assembly_SecurityRuleSet;
                xamlMember.SetIsReadOnly();
                break;
            case "BoldReports.UI.Xaml.ReportViewer.EnableVirtualEvaluation":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "EnableVirtualEvaluation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_ReportViewer_EnableVirtualEvaluation;
                xamlMember.Setter = set_40_ReportViewer_EnableVirtualEvaluation;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.RoundLayoutMeasures":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "RoundLayoutMeasures", "Boolean");
                xamlMember.Getter = get_41_ReportViewer_RoundLayoutMeasures;
                xamlMember.Setter = set_41_ReportViewer_RoundLayoutMeasures;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.MeasureTextOption":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "MeasureTextOption", "BoldReports.UI.Xaml.MeasureTextOptions");
                xamlMember.Getter = get_42_ReportViewer_MeasureTextOption;
                xamlMember.Setter = set_42_ReportViewer_MeasureTextOption;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ReportServiceURL":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ReportServiceURL", "String");
                xamlMember.Getter = get_43_ReportViewer_ReportServiceURL;
                xamlMember.Setter = set_43_ReportViewer_ReportServiceURL;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ExportMode":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ExportMode", "BoldReports.UI.Xaml.ExportMode");
                xamlMember.Getter = get_44_ReportViewer_ExportMode;
                xamlMember.Setter = set_44_ReportViewer_ExportMode;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ShowExportStatus":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ShowExportStatus", "Boolean");
                xamlMember.Getter = get_45_ReportViewer_ShowExportStatus;
                xamlMember.Setter = set_45_ReportViewer_ShowExportStatus;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.LoadCredentialsInformationinServer":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "LoadCredentialsInformationinServer", "Boolean");
                xamlMember.Getter = get_46_ReportViewer_LoadCredentialsInformationinServer;
                xamlMember.Setter = set_46_ReportViewer_LoadCredentialsInformationinServer;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ExportSettings":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ExportSettings", "BoldReports.Writer.ExportSettings");
                xamlMember.Getter = get_47_ReportViewer_ExportSettings;
                xamlMember.Setter = set_47_ReportViewer_ExportSettings;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.WordOptions":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "WordOptions", "BoldReports.Writer.WordOptions");
                xamlMember.Getter = get_48_ReportViewer_WordOptions;
                xamlMember.Setter = set_48_ReportViewer_WordOptions;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ExcelOptions":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ExcelOptions", "BoldReports.Writer.ExcelOptions");
                xamlMember.Getter = get_49_ReportViewer_ExcelOptions;
                xamlMember.Setter = set_49_ReportViewer_ExcelOptions;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.PDFOptions":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "PDFOptions", "BoldReports.Writer.PDFOptions");
                xamlMember.Getter = get_50_ReportViewer_PDFOptions;
                xamlMember.Setter = set_50_ReportViewer_PDFOptions;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.CsvOptions":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "CsvOptions", "BoldReports.Writer.CsvOptions");
                xamlMember.Getter = get_51_ReportViewer_CsvOptions;
                xamlMember.Setter = set_51_ReportViewer_CsvOptions;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.HTMLOptions":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "HTMLOptions", "BoldReports.Writer.HTMLOptions");
                xamlMember.Getter = get_52_ReportViewer_HTMLOptions;
                xamlMember.Setter = set_52_ReportViewer_HTMLOptions;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.PPTOptions":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "PPTOptions", "BoldReports.Writer.PPTOptions");
                xamlMember.Getter = get_53_ReportViewer_PPTOptions;
                xamlMember.Setter = set_53_ReportViewer_PPTOptions;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.ServiceAuthorizationToken":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "ServiceAuthorizationToken", "String");
                xamlMember.Getter = get_54_ReportViewer_ServiceAuthorizationToken;
                xamlMember.Setter = set_54_ReportViewer_ServiceAuthorizationToken;
                break;
            case "BoldReports.UI.Xaml.ReportViewer.CurrentPage":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BoldReports.UI.Xaml.ReportViewer");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "CurrentPage", "Int32");
                xamlMember.Getter = get_55_ReportViewer_CurrentPage;
                xamlMember.Setter = set_55_ReportViewer_CurrentPage;
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Type":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Type", "String");
                xamlMember.Getter = get_56_SetterValueBindingHelper_Type;
                xamlMember.Setter = set_56_SetterValueBindingHelper_Type;
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Property":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Property", "String");
                xamlMember.Getter = get_57_SetterValueBindingHelper_Property;
                xamlMember.Setter = set_57_SetterValueBindingHelper_Property;
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Binding":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Binding", "Windows.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_58_SetterValueBindingHelper_Binding;
                xamlMember.Setter = set_58_SetterValueBindingHelper_Binding;
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Values":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "Values", "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>");
                xamlMember.Getter = get_59_SetterValueBindingHelper_Values;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.PropertyBinding":
                userType = (global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlMember(this, "PropertyBinding", "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_60_SetterValueBindingHelper_PropertyBinding;
                xamlMember.Setter = set_60_SetterValueBindingHelper_PropertyBinding;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlSystemBaseType
    {
        global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ProductCatalog.ProductCatalog_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

